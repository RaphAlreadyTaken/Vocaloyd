//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Discotheque.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package discotheque;

public class Entry implements java.lang.Cloneable,
                              java.io.Serializable
{
    public String key;

    public String value;

    public Entry()
    {
        this.key = "";
        this.value = "";
    }

    public Entry(String key, String value)
    {
        this.key = key;
        this.value = value;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Entry r = null;
        if(rhs instanceof Entry)
        {
            r = (Entry)rhs;
        }

        if(r != null)
        {
            if(this.key != r.key)
            {
                if(this.key == null || r.key == null || !this.key.equals(r.key))
                {
                    return false;
                }
            }
            if(this.value != r.value)
            {
                if(this.value == null || r.value == null || !this.value.equals(r.value))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::discotheque::Entry");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, key);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, value);
        return h_;
    }

    public Entry clone()
    {
        Entry c = null;
        try
        {
            c = (Entry)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.key);
        ostr.writeString(this.value);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.key = istr.readString();
        this.value = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Entry v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Entry ice_read(com.zeroc.Ice.InputStream istr)
    {
        Entry v = new Entry();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Entry> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Entry v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Entry> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Entry.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Entry _nullMarshalValue = new Entry();

    /** @hidden */
    public static final long serialVersionUID = 1867018281L;
}
