//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Discotheque.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package discotheque;

public interface trackManagement extends com.zeroc.Ice.Object
{
    void ajouterTitre(Morceau song, com.zeroc.Ice.Current current);

    Morceau[] recupererTitres(com.zeroc.Ice.Current current);

    Morceau[] rechercher(String info, com.zeroc.Ice.Current current);

    Morceau[] rechercherParTitre(String title, com.zeroc.Ice.Current current);

    Morceau[] rechercherParArtiste(String artist, com.zeroc.Ice.Current current);

    Morceau[] rechercherParAlbum(String album, com.zeroc.Ice.Current current);

    Morceau[] rechercherParGenre(String genre, com.zeroc.Ice.Current current);

    Morceau[] rechercherParDuree(String duration, com.zeroc.Ice.Current current);

    boolean supprimerTitre(String title, String artist, com.zeroc.Ice.Current current);

    boolean supprimerAlbum(String artist, String album, com.zeroc.Ice.Current current);

    boolean supprimerArtiste(String artist, com.zeroc.Ice.Current current);

    String jouerMorceaux(Morceau[] morceaux, int port, com.zeroc.Ice.Current current);

    void playPause(com.zeroc.Ice.Current current);

    void nextTrack(com.zeroc.Ice.Current current);

    void previousTrack(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::discotheque::trackManagement"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::discotheque::trackManagement";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ajouterTitre(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Morceau iceP_song;
        iceP_song = Morceau.ice_read(istr);
        inS.endReadParams();
        obj.ajouterTitre(iceP_song, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_recupererTitres(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Morceau[] ret = obj.recupererTitres(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercher(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_info;
        iceP_info = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercher(iceP_info, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParTitre(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        iceP_title = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercherParTitre(iceP_title, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParArtiste(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        iceP_artist = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercherParArtiste(iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParAlbum(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_album;
        iceP_album = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercherParAlbum(iceP_album, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParGenre(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_genre;
        iceP_genre = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercherParGenre(iceP_genre, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParDuree(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_duration;
        iceP_duration = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercherParDuree(iceP_duration, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supprimerTitre(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        inS.endReadParams();
        boolean ret = obj.supprimerTitre(iceP_title, iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supprimerAlbum(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        String iceP_album;
        iceP_artist = istr.readString();
        iceP_album = istr.readString();
        inS.endReadParams();
        boolean ret = obj.supprimerAlbum(iceP_artist, iceP_album, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supprimerArtiste(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        iceP_artist = istr.readString();
        inS.endReadParams();
        boolean ret = obj.supprimerArtiste(iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_jouerMorceaux(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Morceau[] iceP_morceaux;
        int iceP_port;
        iceP_morceaux = MorceauxHelper.read(istr);
        iceP_port = istr.readInt();
        inS.endReadParams();
        String ret = obj.jouerMorceaux(iceP_morceaux, iceP_port, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_playPause(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.playPause(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_nextTrack(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.nextTrack(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_previousTrack(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.previousTrack(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ajouterTitre",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "jouerMorceaux",
        "nextTrack",
        "playPause",
        "previousTrack",
        "rechercher",
        "rechercherParAlbum",
        "rechercherParArtiste",
        "rechercherParDuree",
        "rechercherParGenre",
        "rechercherParTitre",
        "recupererTitres",
        "supprimerAlbum",
        "supprimerArtiste",
        "supprimerTitre"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_ajouterTitre(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_jouerMorceaux(this, in, current);
            }
            case 6:
            {
                return _iceD_nextTrack(this, in, current);
            }
            case 7:
            {
                return _iceD_playPause(this, in, current);
            }
            case 8:
            {
                return _iceD_previousTrack(this, in, current);
            }
            case 9:
            {
                return _iceD_rechercher(this, in, current);
            }
            case 10:
            {
                return _iceD_rechercherParAlbum(this, in, current);
            }
            case 11:
            {
                return _iceD_rechercherParArtiste(this, in, current);
            }
            case 12:
            {
                return _iceD_rechercherParDuree(this, in, current);
            }
            case 13:
            {
                return _iceD_rechercherParGenre(this, in, current);
            }
            case 14:
            {
                return _iceD_rechercherParTitre(this, in, current);
            }
            case 15:
            {
                return _iceD_recupererTitres(this, in, current);
            }
            case 16:
            {
                return _iceD_supprimerAlbum(this, in, current);
            }
            case 17:
            {
                return _iceD_supprimerArtiste(this, in, current);
            }
            case 18:
            {
                return _iceD_supprimerTitre(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
