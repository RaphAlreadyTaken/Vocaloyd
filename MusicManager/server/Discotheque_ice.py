# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Discotheque.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module discotheque
_M_discotheque = Ice.openModule('discotheque')
__name__ = 'discotheque'

if 'Morceau' not in _M_discotheque.__dict__:
    _M_discotheque.Morceau = Ice.createTempClass()
    class Morceau(object):
        def __init__(self, titre='', artiste='', album='', genre='', file='', duree=''):
            self.titre = titre
            self.artiste = artiste
            self.album = album
            self.genre = genre
            self.file = file
            self.duree = duree

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.titre)
            _h = 5 * _h + Ice.getHash(self.artiste)
            _h = 5 * _h + Ice.getHash(self.album)
            _h = 5 * _h + Ice.getHash(self.genre)
            _h = 5 * _h + Ice.getHash(self.file)
            _h = 5 * _h + Ice.getHash(self.duree)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_discotheque.Morceau):
                return NotImplemented
            else:
                if self.titre is None or other.titre is None:
                    if self.titre != other.titre:
                        return (-1 if self.titre is None else 1)
                else:
                    if self.titre < other.titre:
                        return -1
                    elif self.titre > other.titre:
                        return 1
                if self.artiste is None or other.artiste is None:
                    if self.artiste != other.artiste:
                        return (-1 if self.artiste is None else 1)
                else:
                    if self.artiste < other.artiste:
                        return -1
                    elif self.artiste > other.artiste:
                        return 1
                if self.album is None or other.album is None:
                    if self.album != other.album:
                        return (-1 if self.album is None else 1)
                else:
                    if self.album < other.album:
                        return -1
                    elif self.album > other.album:
                        return 1
                if self.genre is None or other.genre is None:
                    if self.genre != other.genre:
                        return (-1 if self.genre is None else 1)
                else:
                    if self.genre < other.genre:
                        return -1
                    elif self.genre > other.genre:
                        return 1
                if self.file is None or other.file is None:
                    if self.file != other.file:
                        return (-1 if self.file is None else 1)
                else:
                    if self.file < other.file:
                        return -1
                    elif self.file > other.file:
                        return 1
                if self.duree is None or other.duree is None:
                    if self.duree != other.duree:
                        return (-1 if self.duree is None else 1)
                else:
                    if self.duree < other.duree:
                        return -1
                    elif self.duree > other.duree:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_discotheque._t_Morceau)

        __repr__ = __str__

    _M_discotheque._t_Morceau = IcePy.defineStruct('::discotheque::Morceau', Morceau, (), (
        ('titre', (), IcePy._t_string),
        ('artiste', (), IcePy._t_string),
        ('album', (), IcePy._t_string),
        ('genre', (), IcePy._t_string),
        ('file', (), IcePy._t_string),
        ('duree', (), IcePy._t_string)
    ))

    _M_discotheque.Morceau = Morceau
    del Morceau

if '_t_Morceaux' not in _M_discotheque.__dict__:
    _M_discotheque._t_Morceaux = IcePy.defineSequence('::discotheque::Morceaux', (), _M_discotheque._t_Morceau)

_M_discotheque._t_trackManagement = IcePy.defineValue('::discotheque::trackManagement', Ice.Value, -1, (), False, True, None, ())

if 'trackManagementPrx' not in _M_discotheque.__dict__:
    _M_discotheque.trackManagementPrx = Ice.createTempClass()
    class trackManagementPrx(Ice.ObjectPrx):

        def ajouterTitre(self, song, context=None):
            return _M_discotheque.trackManagement._op_ajouterTitre.invoke(self, ((song, ), context))

        def ajouterTitreAsync(self, song, context=None):
            return _M_discotheque.trackManagement._op_ajouterTitre.invokeAsync(self, ((song, ), context))

        def begin_ajouterTitre(self, song, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_ajouterTitre.begin(self, ((song, ), _response, _ex, _sent, context))

        def end_ajouterTitre(self, _r):
            return _M_discotheque.trackManagement._op_ajouterTitre.end(self, _r)

        def recupererTitres(self, context=None):
            return _M_discotheque.trackManagement._op_recupererTitres.invoke(self, ((), context))

        def recupererTitresAsync(self, context=None):
            return _M_discotheque.trackManagement._op_recupererTitres.invokeAsync(self, ((), context))

        def begin_recupererTitres(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_recupererTitres.begin(self, ((), _response, _ex, _sent, context))

        def end_recupererTitres(self, _r):
            return _M_discotheque.trackManagement._op_recupererTitres.end(self, _r)

        def rechercher(self, info, context=None):
            return _M_discotheque.trackManagement._op_rechercher.invoke(self, ((info, ), context))

        def rechercherAsync(self, info, context=None):
            return _M_discotheque.trackManagement._op_rechercher.invokeAsync(self, ((info, ), context))

        def begin_rechercher(self, info, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercher.begin(self, ((info, ), _response, _ex, _sent, context))

        def end_rechercher(self, _r):
            return _M_discotheque.trackManagement._op_rechercher.end(self, _r)

        def rechercherParTitre(self, title, context=None):
            return _M_discotheque.trackManagement._op_rechercherParTitre.invoke(self, ((title, ), context))

        def rechercherParTitreAsync(self, title, context=None):
            return _M_discotheque.trackManagement._op_rechercherParTitre.invokeAsync(self, ((title, ), context))

        def begin_rechercherParTitre(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercherParTitre.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_rechercherParTitre(self, _r):
            return _M_discotheque.trackManagement._op_rechercherParTitre.end(self, _r)

        def rechercherParArtiste(self, artist, context=None):
            return _M_discotheque.trackManagement._op_rechercherParArtiste.invoke(self, ((artist, ), context))

        def rechercherParArtisteAsync(self, artist, context=None):
            return _M_discotheque.trackManagement._op_rechercherParArtiste.invokeAsync(self, ((artist, ), context))

        def begin_rechercherParArtiste(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercherParArtiste.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_rechercherParArtiste(self, _r):
            return _M_discotheque.trackManagement._op_rechercherParArtiste.end(self, _r)

        def rechercherParAlbum(self, album, context=None):
            return _M_discotheque.trackManagement._op_rechercherParAlbum.invoke(self, ((album, ), context))

        def rechercherParAlbumAsync(self, album, context=None):
            return _M_discotheque.trackManagement._op_rechercherParAlbum.invokeAsync(self, ((album, ), context))

        def begin_rechercherParAlbum(self, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercherParAlbum.begin(self, ((album, ), _response, _ex, _sent, context))

        def end_rechercherParAlbum(self, _r):
            return _M_discotheque.trackManagement._op_rechercherParAlbum.end(self, _r)

        def rechercherParGenre(self, genre, context=None):
            return _M_discotheque.trackManagement._op_rechercherParGenre.invoke(self, ((genre, ), context))

        def rechercherParGenreAsync(self, genre, context=None):
            return _M_discotheque.trackManagement._op_rechercherParGenre.invokeAsync(self, ((genre, ), context))

        def begin_rechercherParGenre(self, genre, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercherParGenre.begin(self, ((genre, ), _response, _ex, _sent, context))

        def end_rechercherParGenre(self, _r):
            return _M_discotheque.trackManagement._op_rechercherParGenre.end(self, _r)

        def rechercherParDuree(self, duration, context=None):
            return _M_discotheque.trackManagement._op_rechercherParDuree.invoke(self, ((duration, ), context))

        def rechercherParDureeAsync(self, duration, context=None):
            return _M_discotheque.trackManagement._op_rechercherParDuree.invokeAsync(self, ((duration, ), context))

        def begin_rechercherParDuree(self, duration, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercherParDuree.begin(self, ((duration, ), _response, _ex, _sent, context))

        def end_rechercherParDuree(self, _r):
            return _M_discotheque.trackManagement._op_rechercherParDuree.end(self, _r)

        def supprimerTitre(self, title, artist, context=None):
            return _M_discotheque.trackManagement._op_supprimerTitre.invoke(self, ((title, artist), context))

        def supprimerTitreAsync(self, title, artist, context=None):
            return _M_discotheque.trackManagement._op_supprimerTitre.invokeAsync(self, ((title, artist), context))

        def begin_supprimerTitre(self, title, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_supprimerTitre.begin(self, ((title, artist), _response, _ex, _sent, context))

        def end_supprimerTitre(self, _r):
            return _M_discotheque.trackManagement._op_supprimerTitre.end(self, _r)

        def supprimerAlbum(self, artist, album, context=None):
            return _M_discotheque.trackManagement._op_supprimerAlbum.invoke(self, ((artist, album), context))

        def supprimerAlbumAsync(self, artist, album, context=None):
            return _M_discotheque.trackManagement._op_supprimerAlbum.invokeAsync(self, ((artist, album), context))

        def begin_supprimerAlbum(self, artist, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_supprimerAlbum.begin(self, ((artist, album), _response, _ex, _sent, context))

        def end_supprimerAlbum(self, _r):
            return _M_discotheque.trackManagement._op_supprimerAlbum.end(self, _r)

        def supprimerArtiste(self, artist, context=None):
            return _M_discotheque.trackManagement._op_supprimerArtiste.invoke(self, ((artist, ), context))

        def supprimerArtisteAsync(self, artist, context=None):
            return _M_discotheque.trackManagement._op_supprimerArtiste.invokeAsync(self, ((artist, ), context))

        def begin_supprimerArtiste(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_supprimerArtiste.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_supprimerArtiste(self, _r):
            return _M_discotheque.trackManagement._op_supprimerArtiste.end(self, _r)

        def jouerMorceaux(self, morceaux, port, context=None):
            return _M_discotheque.trackManagement._op_jouerMorceaux.invoke(self, ((morceaux, port), context))

        def jouerMorceauxAsync(self, morceaux, port, context=None):
            return _M_discotheque.trackManagement._op_jouerMorceaux.invokeAsync(self, ((morceaux, port), context))

        def begin_jouerMorceaux(self, morceaux, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_jouerMorceaux.begin(self, ((morceaux, port), _response, _ex, _sent, context))

        def end_jouerMorceaux(self, _r):
            return _M_discotheque.trackManagement._op_jouerMorceaux.end(self, _r)

        def playPause(self, port, context=None):
            return _M_discotheque.trackManagement._op_playPause.invoke(self, ((port, ), context))

        def playPauseAsync(self, port, context=None):
            return _M_discotheque.trackManagement._op_playPause.invokeAsync(self, ((port, ), context))

        def begin_playPause(self, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_playPause.begin(self, ((port, ), _response, _ex, _sent, context))

        def end_playPause(self, _r):
            return _M_discotheque.trackManagement._op_playPause.end(self, _r)

        def nextTrack(self, port, context=None):
            return _M_discotheque.trackManagement._op_nextTrack.invoke(self, ((port, ), context))

        def nextTrackAsync(self, port, context=None):
            return _M_discotheque.trackManagement._op_nextTrack.invokeAsync(self, ((port, ), context))

        def begin_nextTrack(self, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_nextTrack.begin(self, ((port, ), _response, _ex, _sent, context))

        def end_nextTrack(self, _r):
            return _M_discotheque.trackManagement._op_nextTrack.end(self, _r)

        def previousTrack(self, port, context=None):
            return _M_discotheque.trackManagement._op_previousTrack.invoke(self, ((port, ), context))

        def previousTrackAsync(self, port, context=None):
            return _M_discotheque.trackManagement._op_previousTrack.invokeAsync(self, ((port, ), context))

        def begin_previousTrack(self, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_previousTrack.begin(self, ((port, ), _response, _ex, _sent, context))

        def end_previousTrack(self, _r):
            return _M_discotheque.trackManagement._op_previousTrack.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_discotheque.trackManagementPrx.ice_checkedCast(proxy, '::discotheque::trackManagement', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_discotheque.trackManagementPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::discotheque::trackManagement'
    _M_discotheque._t_trackManagementPrx = IcePy.defineProxy('::discotheque::trackManagement', trackManagementPrx)

    _M_discotheque.trackManagementPrx = trackManagementPrx
    del trackManagementPrx

    _M_discotheque.trackManagement = Ice.createTempClass()
    class trackManagement(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::discotheque::trackManagement')

        def ice_id(self, current=None):
            return '::discotheque::trackManagement'

        @staticmethod
        def ice_staticId():
            return '::discotheque::trackManagement'

        def ajouterTitre(self, song, current=None):
            raise NotImplementedError("servant method 'ajouterTitre' not implemented")

        def recupererTitres(self, current=None):
            raise NotImplementedError("servant method 'recupererTitres' not implemented")

        def rechercher(self, info, current=None):
            raise NotImplementedError("servant method 'rechercher' not implemented")

        def rechercherParTitre(self, title, current=None):
            raise NotImplementedError("servant method 'rechercherParTitre' not implemented")

        def rechercherParArtiste(self, artist, current=None):
            raise NotImplementedError("servant method 'rechercherParArtiste' not implemented")

        def rechercherParAlbum(self, album, current=None):
            raise NotImplementedError("servant method 'rechercherParAlbum' not implemented")

        def rechercherParGenre(self, genre, current=None):
            raise NotImplementedError("servant method 'rechercherParGenre' not implemented")

        def rechercherParDuree(self, duration, current=None):
            raise NotImplementedError("servant method 'rechercherParDuree' not implemented")

        def supprimerTitre(self, title, artist, current=None):
            raise NotImplementedError("servant method 'supprimerTitre' not implemented")

        def supprimerAlbum(self, artist, album, current=None):
            raise NotImplementedError("servant method 'supprimerAlbum' not implemented")

        def supprimerArtiste(self, artist, current=None):
            raise NotImplementedError("servant method 'supprimerArtiste' not implemented")

        def jouerMorceaux(self, morceaux, port, current=None):
            raise NotImplementedError("servant method 'jouerMorceaux' not implemented")

        def playPause(self, port, current=None):
            raise NotImplementedError("servant method 'playPause' not implemented")

        def nextTrack(self, port, current=None):
            raise NotImplementedError("servant method 'nextTrack' not implemented")

        def previousTrack(self, port, current=None):
            raise NotImplementedError("servant method 'previousTrack' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_discotheque._t_trackManagementDisp)

        __repr__ = __str__

    _M_discotheque._t_trackManagementDisp = IcePy.defineClass('::discotheque::trackManagement', trackManagement, (), None, ())
    trackManagement._ice_type = _M_discotheque._t_trackManagementDisp

    trackManagement._op_ajouterTitre = IcePy.Operation('ajouterTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_discotheque._t_Morceau, False, 0),), (), None, ())
    trackManagement._op_recupererTitres = IcePy.Operation('recupererTitres', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercher = IcePy.Operation('rechercher', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercherParTitre = IcePy.Operation('rechercherParTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercherParArtiste = IcePy.Operation('rechercherParArtiste', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercherParAlbum = IcePy.Operation('rechercherParAlbum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercherParGenre = IcePy.Operation('rechercherParGenre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercherParDuree = IcePy.Operation('rechercherParDuree', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_supprimerTitre = IcePy.Operation('supprimerTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    trackManagement._op_supprimerAlbum = IcePy.Operation('supprimerAlbum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    trackManagement._op_supprimerArtiste = IcePy.Operation('supprimerArtiste', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    trackManagement._op_jouerMorceaux = IcePy.Operation('jouerMorceaux', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_discotheque._t_Morceaux, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    trackManagement._op_playPause = IcePy.Operation('playPause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    trackManagement._op_nextTrack = IcePy.Operation('nextTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    trackManagement._op_previousTrack = IcePy.Operation('previousTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_discotheque.trackManagement = trackManagement
    del trackManagement

_M_discotheque._t_clientManagement = IcePy.defineValue('::discotheque::clientManagement', Ice.Value, -1, (), False, True, None, ())

if 'clientManagementPrx' not in _M_discotheque.__dict__:
    _M_discotheque.clientManagementPrx = Ice.createTempClass()
    class clientManagementPrx(Ice.ObjectPrx):

        def subscribe(self, context=None):
            return _M_discotheque.clientManagement._op_subscribe.invoke(self, ((), context))

        def subscribeAsync(self, context=None):
            return _M_discotheque.clientManagement._op_subscribe.invokeAsync(self, ((), context))

        def begin_subscribe(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.clientManagement._op_subscribe.begin(self, ((), _response, _ex, _sent, context))

        def end_subscribe(self, _r):
            return _M_discotheque.clientManagement._op_subscribe.end(self, _r)

        def unsubscribe(self, port, context=None):
            return _M_discotheque.clientManagement._op_unsubscribe.invoke(self, ((port, ), context))

        def unsubscribeAsync(self, port, context=None):
            return _M_discotheque.clientManagement._op_unsubscribe.invokeAsync(self, ((port, ), context))

        def begin_unsubscribe(self, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.clientManagement._op_unsubscribe.begin(self, ((port, ), _response, _ex, _sent, context))

        def end_unsubscribe(self, _r):
            return _M_discotheque.clientManagement._op_unsubscribe.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_discotheque.clientManagementPrx.ice_checkedCast(proxy, '::discotheque::clientManagement', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_discotheque.clientManagementPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::discotheque::clientManagement'
    _M_discotheque._t_clientManagementPrx = IcePy.defineProxy('::discotheque::clientManagement', clientManagementPrx)

    _M_discotheque.clientManagementPrx = clientManagementPrx
    del clientManagementPrx

    _M_discotheque.clientManagement = Ice.createTempClass()
    class clientManagement(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::discotheque::clientManagement')

        def ice_id(self, current=None):
            return '::discotheque::clientManagement'

        @staticmethod
        def ice_staticId():
            return '::discotheque::clientManagement'

        def subscribe(self, current=None):
            raise NotImplementedError("servant method 'subscribe' not implemented")

        def unsubscribe(self, port, current=None):
            raise NotImplementedError("servant method 'unsubscribe' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_discotheque._t_clientManagementDisp)

        __repr__ = __str__

    _M_discotheque._t_clientManagementDisp = IcePy.defineClass('::discotheque::clientManagement', clientManagement, (), None, ())
    clientManagement._ice_type = _M_discotheque._t_clientManagementDisp

    clientManagement._op_subscribe = IcePy.Operation('subscribe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    clientManagement._op_unsubscribe = IcePy.Operation('unsubscribe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_discotheque.clientManagement = clientManagement
    del clientManagement

# End of module discotheque
