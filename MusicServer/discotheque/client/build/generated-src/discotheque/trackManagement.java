//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Discotheque.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package discotheque;

public interface trackManagement extends com.zeroc.Ice.Object
{
    void ajout(Morceau song, com.zeroc.Ice.Current current);

    Morceau[] recupTitres(com.zeroc.Ice.Current current);

    Morceau[] rechercheParTitre(String title, com.zeroc.Ice.Current current);

    Morceau[] rechercheParArtiste(String artist, com.zeroc.Ice.Current current);

    boolean suppressionTitre(String title, String artist, com.zeroc.Ice.Current current);

    boolean suppressionAlbum(String artist, String album, com.zeroc.Ice.Current current);

    void jouerTitres(String title, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::discotheque::trackManagement"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::discotheque::trackManagement";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ajout(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Morceau iceP_song;
        iceP_song = Morceau.ice_read(istr);
        inS.endReadParams();
        obj.ajout(iceP_song, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_recupTitres(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Morceau[] ret = obj.recupTitres(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercheParTitre(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        iceP_title = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercheParTitre(iceP_title, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercheParArtiste(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        iceP_artist = istr.readString();
        inS.endReadParams();
        Morceau[] ret = obj.rechercheParArtiste(iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MorceauxHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_suppressionTitre(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        inS.endReadParams();
        boolean ret = obj.suppressionTitre(iceP_title, iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_suppressionAlbum(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        String iceP_album;
        iceP_artist = istr.readString();
        iceP_album = istr.readString();
        inS.endReadParams();
        boolean ret = obj.suppressionAlbum(iceP_artist, iceP_album, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_jouerTitres(trackManagement obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        iceP_title = istr.readString();
        inS.endReadParams();
        obj.jouerTitres(iceP_title, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ajout",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "jouerTitres",
        "rechercheParArtiste",
        "rechercheParTitre",
        "recupTitres",
        "suppressionAlbum",
        "suppressionTitre"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_ajout(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_jouerTitres(this, in, current);
            }
            case 6:
            {
                return _iceD_rechercheParArtiste(this, in, current);
            }
            case 7:
            {
                return _iceD_rechercheParTitre(this, in, current);
            }
            case 8:
            {
                return _iceD_recupTitres(this, in, current);
            }
            case 9:
            {
                return _iceD_suppressionAlbum(this, in, current);
            }
            case 10:
            {
                return _iceD_suppressionTitre(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
