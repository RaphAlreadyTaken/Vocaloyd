# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Discotheque.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module discotheque
_M_discotheque = Ice.openModule('discotheque')
__name__ = 'discotheque'

if '_t_data' not in _M_discotheque.__dict__:
    _M_discotheque._t_data = IcePy.defineSequence('::discotheque::data', (), IcePy._t_byte)

if 'Morceau' not in _M_discotheque.__dict__:
    _M_discotheque.Morceau = Ice.createTempClass()
    class Morceau(object):
        def __init__(self, artiste='', album='', titre='', file=''):
            self.artiste = artiste
            self.album = album
            self.titre = titre
            self.file = file

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.artiste)
            _h = 5 * _h + Ice.getHash(self.album)
            _h = 5 * _h + Ice.getHash(self.titre)
            _h = 5 * _h + Ice.getHash(self.file)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_discotheque.Morceau):
                return NotImplemented
            else:
                if self.artiste is None or other.artiste is None:
                    if self.artiste != other.artiste:
                        return (-1 if self.artiste is None else 1)
                else:
                    if self.artiste < other.artiste:
                        return -1
                    elif self.artiste > other.artiste:
                        return 1
                if self.album is None or other.album is None:
                    if self.album != other.album:
                        return (-1 if self.album is None else 1)
                else:
                    if self.album < other.album:
                        return -1
                    elif self.album > other.album:
                        return 1
                if self.titre is None or other.titre is None:
                    if self.titre != other.titre:
                        return (-1 if self.titre is None else 1)
                else:
                    if self.titre < other.titre:
                        return -1
                    elif self.titre > other.titre:
                        return 1
                if self.file is None or other.file is None:
                    if self.file != other.file:
                        return (-1 if self.file is None else 1)
                else:
                    if self.file < other.file:
                        return -1
                    elif self.file > other.file:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_discotheque._t_Morceau)

        __repr__ = __str__

    _M_discotheque._t_Morceau = IcePy.defineStruct('::discotheque::Morceau', Morceau, (), (
        ('artiste', (), IcePy._t_string),
        ('album', (), IcePy._t_string),
        ('titre', (), IcePy._t_string),
        ('file', (), IcePy._t_string)
    ))

    _M_discotheque.Morceau = Morceau
    del Morceau

if '_t_Morceaux' not in _M_discotheque.__dict__:
    _M_discotheque._t_Morceaux = IcePy.defineSequence('::discotheque::Morceaux', (), _M_discotheque._t_Morceau)

_M_discotheque._t_trackManagement = IcePy.defineValue('::discotheque::trackManagement', Ice.Value, -1, (), False, True, None, ())

if 'trackManagementPrx' not in _M_discotheque.__dict__:
    _M_discotheque.trackManagementPrx = Ice.createTempClass()
    class trackManagementPrx(Ice.ObjectPrx):

        def ajout(self, song, context=None):
            return _M_discotheque.trackManagement._op_ajout.invoke(self, ((song, ), context))

        def ajoutAsync(self, song, context=None):
            return _M_discotheque.trackManagement._op_ajout.invokeAsync(self, ((song, ), context))

        def begin_ajout(self, song, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_ajout.begin(self, ((song, ), _response, _ex, _sent, context))

        def end_ajout(self, _r):
            return _M_discotheque.trackManagement._op_ajout.end(self, _r)

        def recupTitres(self, context=None):
            return _M_discotheque.trackManagement._op_recupTitres.invoke(self, ((), context))

        def recupTitresAsync(self, context=None):
            return _M_discotheque.trackManagement._op_recupTitres.invokeAsync(self, ((), context))

        def begin_recupTitres(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_recupTitres.begin(self, ((), _response, _ex, _sent, context))

        def end_recupTitres(self, _r):
            return _M_discotheque.trackManagement._op_recupTitres.end(self, _r)

        def rechercheParTitre(self, title, context=None):
            return _M_discotheque.trackManagement._op_rechercheParTitre.invoke(self, ((title, ), context))

        def rechercheParTitreAsync(self, title, context=None):
            return _M_discotheque.trackManagement._op_rechercheParTitre.invokeAsync(self, ((title, ), context))

        def begin_rechercheParTitre(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercheParTitre.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_rechercheParTitre(self, _r):
            return _M_discotheque.trackManagement._op_rechercheParTitre.end(self, _r)

        def rechercheParArtiste(self, artist, context=None):
            return _M_discotheque.trackManagement._op_rechercheParArtiste.invoke(self, ((artist, ), context))

        def rechercheParArtisteAsync(self, artist, context=None):
            return _M_discotheque.trackManagement._op_rechercheParArtiste.invokeAsync(self, ((artist, ), context))

        def begin_rechercheParArtiste(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_rechercheParArtiste.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_rechercheParArtiste(self, _r):
            return _M_discotheque.trackManagement._op_rechercheParArtiste.end(self, _r)

        def suppressionTitre(self, title, artist, context=None):
            return _M_discotheque.trackManagement._op_suppressionTitre.invoke(self, ((title, artist), context))

        def suppressionTitreAsync(self, title, artist, context=None):
            return _M_discotheque.trackManagement._op_suppressionTitre.invokeAsync(self, ((title, artist), context))

        def begin_suppressionTitre(self, title, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_suppressionTitre.begin(self, ((title, artist), _response, _ex, _sent, context))

        def end_suppressionTitre(self, _r):
            return _M_discotheque.trackManagement._op_suppressionTitre.end(self, _r)

        def suppressionAlbum(self, artist, album, context=None):
            return _M_discotheque.trackManagement._op_suppressionAlbum.invoke(self, ((artist, album), context))

        def suppressionAlbumAsync(self, artist, album, context=None):
            return _M_discotheque.trackManagement._op_suppressionAlbum.invokeAsync(self, ((artist, album), context))

        def begin_suppressionAlbum(self, artist, album, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_suppressionAlbum.begin(self, ((artist, album), _response, _ex, _sent, context))

        def end_suppressionAlbum(self, _r):
            return _M_discotheque.trackManagement._op_suppressionAlbum.end(self, _r)

        def jouerTitres(self, title, context=None):
            return _M_discotheque.trackManagement._op_jouerTitres.invoke(self, ((title, ), context))

        def jouerTitresAsync(self, title, context=None):
            return _M_discotheque.trackManagement._op_jouerTitres.invokeAsync(self, ((title, ), context))

        def begin_jouerTitres(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_discotheque.trackManagement._op_jouerTitres.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_jouerTitres(self, _r):
            return _M_discotheque.trackManagement._op_jouerTitres.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_discotheque.trackManagementPrx.ice_checkedCast(proxy, '::discotheque::trackManagement', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_discotheque.trackManagementPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::discotheque::trackManagement'
    _M_discotheque._t_trackManagementPrx = IcePy.defineProxy('::discotheque::trackManagement', trackManagementPrx)

    _M_discotheque.trackManagementPrx = trackManagementPrx
    del trackManagementPrx

    _M_discotheque.trackManagement = Ice.createTempClass()
    class trackManagement(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::discotheque::trackManagement')

        def ice_id(self, current=None):
            return '::discotheque::trackManagement'

        @staticmethod
        def ice_staticId():
            return '::discotheque::trackManagement'

        def ajout(self, song, current=None):
            raise NotImplementedError("servant method 'ajout' not implemented")

        def recupTitres(self, current=None):
            raise NotImplementedError("servant method 'recupTitres' not implemented")

        def rechercheParTitre(self, title, current=None):
            raise NotImplementedError("servant method 'rechercheParTitre' not implemented")

        def rechercheParArtiste(self, artist, current=None):
            raise NotImplementedError("servant method 'rechercheParArtiste' not implemented")

        def suppressionTitre(self, title, artist, current=None):
            raise NotImplementedError("servant method 'suppressionTitre' not implemented")

        def suppressionAlbum(self, artist, album, current=None):
            raise NotImplementedError("servant method 'suppressionAlbum' not implemented")

        def jouerTitres(self, title, current=None):
            raise NotImplementedError("servant method 'jouerTitres' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_discotheque._t_trackManagementDisp)

        __repr__ = __str__

    _M_discotheque._t_trackManagementDisp = IcePy.defineClass('::discotheque::trackManagement', trackManagement, (), None, ())
    trackManagement._ice_type = _M_discotheque._t_trackManagementDisp

    trackManagement._op_ajout = IcePy.Operation('ajout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_discotheque._t_Morceau, False, 0),), (), None, ())
    trackManagement._op_recupTitres = IcePy.Operation('recupTitres', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercheParTitre = IcePy.Operation('rechercheParTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_rechercheParArtiste = IcePy.Operation('rechercheParArtiste', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_discotheque._t_Morceaux, False, 0), ())
    trackManagement._op_suppressionTitre = IcePy.Operation('suppressionTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    trackManagement._op_suppressionAlbum = IcePy.Operation('suppressionAlbum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    trackManagement._op_jouerTitres = IcePy.Operation('jouerTitres', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_discotheque.trackManagement = trackManagement
    del trackManagement

# End of module discotheque
